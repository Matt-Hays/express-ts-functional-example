generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ***********
// User Type *
// ***********
model Profile {
  id           String  @id @default(uuid())
  firstName    String
  lastName     String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String  @db.VarChar(2)
  zip          String  @db.VarChar(10)
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  type        Role          @default(CUSTOMER)
  profile     Profile?
  reservation Reservation[]
}

enum Role {
  CUSTOMER
  CLERK
  MANAGER
  ADMIN
}

// ******************
// Reservation Type *
// ******************

model Reservation {
  id          String     @id @default(uuid())
  startDate   DateTime   @default(now())
  endDate     DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String
  vehicle     Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: SetNull)
  vehicleId   String
  insurance   Insurance? @relation(fields: [insuranceId], references: [id])
  insuranceId String?    @unique
  invoice     Invoice?   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId   String?    @unique
}

// **************
// Vehicle Type *
// **************

model Vehicle {
  id           String        @id @default(uuid())
  make         String
  model        String
  mileage      Int
  year         DateTime
  active       Boolean       @default(true)
  reservations Reservation[]
  transfer     Transfer?
}

model Transfer {
  id          String            @id @default(uuid())
  category    TransferCategory?
  beneficiary String
  createdOn   DateTime          @default(now())
  modifiedOn  DateTime          @updatedAt
  vehicle     Vehicle           @relation(fields: [vehicleId], references: [id])
  vehicleId   String            @unique
}

enum TransferCategory {
  DAMAGE
  SAFETY
  MAINTENANCE
}

// ***********************
// Insurance Policy Type *
// ***********************
model Insurance {
  id          String       @id @default(uuid())
  provider    Provider?
  selected    Boolean      @default(false)
  validStart  DateTime?
  validEnd    DateTime?
  reservation Reservation?
}

enum Provider {
  USAA
  PROGRESSIVE
  FARMERS
  ALLSTATE
  GEICO
  STATEFARM
  NATIONWIDE
  SHELTER
  AIG
}

// **************
// Invoice Type *
// **************

model Invoice {
  id                String       @id @default(uuid())
  createdAt         DateTime     @default(now())
  damageFee         Decimal?     @db.Decimal(6, 2)
  fuelFee           Decimal?     @db.Decimal(6, 2)
  administrativeFee Decimal?     @db.Decimal(6, 2)
  standardRate      Decimal?     @db.Decimal(6, 2)
  subtotal          Decimal?     @db.Decimal(7, 2)
  taxRate           Decimal?     @db.Decimal(6, 2)
  total             Decimal?     @db.Decimal(7, 2)
  reservation       Reservation?
  payment           Payment?
}

// **************
// Payment Type *
// **************
model Payment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  method    Method
  complete  Boolean
  invoice   Invoice  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId String   @unique
}

enum Method {
  CREDIT_CARD
  CASH
  CHECK
  CORPORATE_ACCOUNT
}
